#include <stdio.h>
#include <stdlib.h>
#include <time.h>
/**
 * Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.
 * A subarray is a contiguous part of an array.
 * 
 * Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
 * Output: 6
 * Explanation: [4,-1,2,1] has the largest sum = 6.
 * 
 */
int maxSubArray(int* nums, int numsSize){
    // check empty array
    
    int sum = 0;
    
    for (int i = 0; i < numsSize; i++){
        int loopSum = 0;
        //int newarr[100], k = 0;   // for debug
        for (int j = i; j < numsSize; j++){
            loopSum = loopSum + nums[j];
            //newarr[k] = nums[j];  // for debug
            //k++;  // for debug
            printf("nums[%d]: %d, loopSum %d\n", j, nums[j],loopSum);
            if (loopSum > sum){
                sum = loopSum;
                printf("sum %d\n", sum);
                /*for (int x=0; x<k;x++)
                    printf("%d,",newarr[x]);
                printf("\n");*/
            }
        }
    }
    
    return sum;

}

int main(void){
    int arr[5] = {5,4,-1,7,8};
    //int target = 9;
    int numElements = 5;

    /*printf("Enter num of elements\n");
    scanf("%d", &numElements);
    
    int *arr = malloc(numElements*sizeof(int));
    srand ( time(NULL) );
    
    for (int i=0;i<numElements;i++){
        arr[i] = (rand() - RAND_MAX/2) % 10;
        printf("%d,",arr[i]);
    }
    printf("\n");*/
    
    int p = maxSubArray(arr, numElements);
    printf("p=%d\n",p);

    return 0;
    
}
